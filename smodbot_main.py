import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio

with open(".token", 'r') as file_token:
    BOT_TOKEN = file_token.read()

GUILD_ID = discord.Object(id=1165695453732536370)

submission_ideas = []
submission_authors = []
screenshots = []
round_idea : str
round_author : str


intents = discord.Intents.default()
intents.message_content = True


class Client(discord.Client):
    def __init__(self, *, intents: discord.Intents):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    synced_commands = []

    async def setup_hook(self):
        self.tree.copy_global_to(guild=GUILD_ID)
        Client.synced_commands = await self.tree.sync(guild=GUILD_ID)


client = Client(intents=intents)


@client.event
async def on_ready():
    print(f'Logged in as {client.user}, bot latency is {round(client.latency * 1000)}ms')
    print(f'Synced {len(client.synced_commands)} commands to guild {GUILD_ID.id}')


@client.event
async def on_message(message):
    if message.author == client.user:
        return

#TODO: refactor to send only one message in case of multiple attachments
    if message.attachments:
        for attachment in message.attachments:
            if attachment.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                await message.channel.send(f"–í–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç *{attachment.filename}* –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
                screenshots.append(attachment.url)
            else:
                await message.channel.send(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É *{attachment.filename}*, –±—É–¥—å –ª–∞—Å–∫–∞ –∑–∞–≥—Ä—É–∑—ñ—Ç—å "
                                           "—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ **png**, **jpg**, **jpeg** –∞–±–æ **gif**")


@client.tree.command(name="submit", description="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–≤–æ—é —ñ–¥–µ—é –¥–ª—è —á–µ–ª–µ–Ω–¥–∂—É", guild=GUILD_ID)
async def submit_idea(interaction: discord.Interaction, idea: str):
    submission_ideas.append(idea)
    submission_authors.append(interaction.user.display_name)
    await interaction.response.send_message(f"**{interaction.user.name}** –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ –Ω–æ–≤—É —ñ–¥–µ—é –¥–ª—è —á–µ–ª–µ–Ω–¥–∂—É")


@client.tree.command(name="start", description="–ü–æ—á–∞—Ç–∏ —á–µ–ª–µ–Ω–¥–∂", guild=GUILD_ID)
async def start_challenge(interaction: discord.Interaction):
    embed_prefase = discord.Embed(title="üî• –í–∏ –≥–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ –∑–º–∞–≥–∞–Ω–Ω—è? üî•",
                                  description="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–µ–ª–µ–Ω–¥–∂",
                                  color=discord.Color.random())

    #TODO: check for len(submission_ideas) to use correct form of word '—ñ–¥–µ—è'
    #TODO: make unable to guess submission author by list of people who submitted ideas

    embed_prefase.add_field(name=f"–ù–∞—Ä–∞–∑—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(submission_ideas)} —ñ–¥–µ—ó –≤—ñ–¥ —Ü–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤:",
                            value=submission_authors)

    class StartChallengeView(discord.ui.View):
        @discord.ui.button(label="–ü–æ—á–∞—Ç–∏ –∑–º–∞–≥–∞–Ω–Ω—è!", style=discord.ButtonStyle.green, emoji="üöÄ")
        async def button_start(self, interaction: discord.Interaction, button: discord.ui.Button):
            channel = interaction.channel
            button.style = discord.ButtonStyle.red
            button.emoji = "‚è≥"
            button.label = "–ó–º–∞–≥–∞–Ω–Ω—è –ø–æ—á–∞–ª–æ—Å—å"
            button.disabled = True
            await interaction.response.edit_message(view=self)

            #TODO: add timer with remaining count to button
            #TODO: add button to skip currently selected idea

            global round_idea
            global round_author
            round_idea = random.choice(submission_ideas)
            round_author = submission_authors[submission_ideas.index(round_idea)]
            submission_ideas.remove(round_idea)
            submission_authors.remove(round_author)

            #TODO: remove randomly selected entry from the list of submission_ideas along with submission author

            embed_refs = discord.Embed(title="üì¢ –£–≤–∞–≥–∞ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º! üì¢",
                                       description="–°—Ç–∞—Ä—Ç—É—î –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.",
                                       color=discord.Color.random())
            embed_refs.add_field(name="–¢–µ–º–∞ —Ü—å–æ–≥–æ —Ä–∞—É–Ω–¥—É:", value=f"***{round_idea}***")
            embed_refs.set_footer(text=f"–ó–∞—Ä–∞–∑ —Å–∞–º–µ —á–∞—Å –ø–æ—à—É–∫–∞—Ç–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —ñ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ñ–≤\n"
                                       f"–ú–∞—î—Ç–µ 3 —Ö–≤, –ø–æ—ó—Ö–∞–ª–∏üöÄÔ∏è")

            await channel.send(embed=embed_refs)

            await asyncio.sleep(10.0)

            await channel.send("üü¢Ô∏è –£–≤–∞–≥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –º–æ–¥–µ–ª—ñ–Ω–≥—É. –ß–∞—Å –ø—ñ—à–æ–≤‚è≥\n")
            await asyncio.sleep(10.0)

            #WARNING about half-time passed for challenge
            await channel.send("üü°Ô∏è –£–≤–∞–≥–∞, –ø–æ–ª–æ–≤–∏–Ω–∞ —á–∞—Å—É –≤–∂–µ –ø—Ä–æ–π—à–ª–∞. –ó–∞–ª–∏—à–∏–ª–æ—Å—è **7.5 —Ö–≤**, —Ç–æ–º—É –ø–æ–∫–≤–∞–ø—Ç–µ—Å—è üîîÔ∏è")
            await asyncio.sleep(10.0)

            #STOP challenge
            embed_stop = discord.Embed(title="üõëÔ∏è –£–≤–∞–≥–∞, —á–∞—Å –≤–∏–π—à–æ–≤!‚åõ",
                                       description="–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ —Å–≤–æ—ó —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ üñº")
            embed_stop.set_footer(text="X—Ç–æ –Ω–µ –≤—Å—Ç–∏–≥–Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç–∏ —Å–≤—ñ–π —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–æ–π –ø—Ä–æ–≥—Ä–∞–≤ üòµ")

            await channel.send("@here", embed=embed_stop)
        #TODO: change client presence during challenge

    if submission_ideas:
        await interaction.response.send_message(embed=embed_prefase, view=StartChallengeView())
    else:
        await interaction.response.send_message("–û—É –Ω–æ—É... –ù—ñ—Ö—Ç–æ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –∂–æ–¥–Ω–æ—ó —ñ–¥–µ—ó –¥–ª—è —á–µ–ª–µ–Ω–¥–∂—É\n"
                                                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **/submit** —â–æ–± –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–≤–æ—é —ñ–¥–µ—é üí°Ô∏è",
                                                ephemeral=True)


@client.tree.command(name="results", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø—Ä–∏—Å–ª–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∞–º–∏", guild=GUILD_ID)
async def display_screenshots(interaction: discord.Interaction):
    #global round_idea
    embeds = []

    #embed = discord.Embed(title="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞—É–Ω–¥—É", description=f"–¢–µ–º–∞ —Ä–∞—É–Ω–¥—É –±—É–ª–∞: {round_idea}",
    #                      color=discord.Color.random())

    if screenshots:
        i = 1
        for url in screenshots:
            embed = discord.Embed(title=f'–°–∫—Ä—ñ–Ω—à–æ—Ç ‚Ññ **{i}**')
            embed.set_image(url=url)
            embeds.append(embed)
            i += 1
        await interaction.response.send_message(embeds=embeds)
    else:
        await interaction.response.send_message("–ù–∞–∂–∞–ª—å —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–≤ —Å–≤–æ—ó—Ö —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤", ephemeral=True)


#We define this function globally to be able to call it with slash command or context menu
async def cyberbully(bully: str, victim: str):
    def load_bully():
        with open("res/bully_phrases.txt", 'r') as file:
            bully_list = file.readlines()
        bully_list = [line.strip() for line in bully_list]
        return bully_list

    def load_statements():
        with open("res/bully_statements.txt", 'r') as file:
            statement_list = file.readlines()
        statement_list = [line.strip() for line in statement_list]
        return statement_list

    def load_questions():
        with open("res/bully_questions.txt", 'r') as file:
            question_list = file.readlines()
        question_list = [line.strip() for line in question_list]
        return question_list

    bully_phrases = load_bully()
    statement_phrases = load_statements()
    question_phrases = load_questions()

    bully_string = random.choice(bully_phrases)
    statement_string = random.choice(statement_phrases)
    question_string = random.choice(question_phrases)

    #TODO: remove entries from the list of phrases after use and reload from file after list is empty

    # if not statement_phrases:
    #     statement_phrases = load_statements()

    # Here we construct our final bulling sentence.It combines with two parts:
    # if main punch (bully) is question (has ?), then we combine random questions with random bully punch.
    # if not then we combine random statement with random bully punch, and finally
    # we replace our placeholders for <bully> and <victim> with usernames

    if bully_string.find('?') != -1:
        sentence = question_string + ' ' + bully_string
    else:
        sentence = statement_string + ' ' + bully_string

    sentence = sentence.replace("<bully>", bully)
    sentence = sentence.replace("<victim>", victim)

    return sentence


@client.tree.command(name="bully", description="–ó–∞–∫—ñ–±–µ—Ä–±—É–±–ª–∏—Ç–∏ –±—É–¥—å-–∫–æ–≥–æ", guild=GUILD_ID)
async def cyberbully_slash(interaction: discord.Interaction, target: discord.Member):
    result = await cyberbully(interaction.user.name, target.name)
    await interaction.response.send_message(result)


@client.tree.context_menu(name="–ó–∞–∫—ñ–±–µ—Ä–±—É–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def cyberbully_context_menu(interaction: discord.Interaction, member: discord.Member):
    result = await cyberbully(interaction.user.name, member.name)
    await interaction.response.send_message(result)


client.run(BOT_TOKEN)